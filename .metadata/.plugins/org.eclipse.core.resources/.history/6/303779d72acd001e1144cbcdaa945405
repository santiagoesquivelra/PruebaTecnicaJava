package com.lr.revisited.portlet;

import com.lr.revisited.constants.EmployeeControllerPortletKeys;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;
import com.liferay.revisated.model.Employee;

import javax.portlet.Portlet;
import javax.portlet.PortletException;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.core.type.TypeReference;


import org.osgi.service.component.annotations.Component;


/**
 * @author Sanks
 */
@Component(
	immediate = true,
	property = {
		"com.liferay.portlet.display-category=category.sample",
		"com.liferay.portlet.header-portlet-css=/css/main.css",
		"com.liferay.portlet.instanceable=true",
		"javax.portlet.display-name=EmployeeController",
		"javax.portlet.init-param.template-path=/",
		"javax.portlet.init-param.view-template=/view.jsp",
		"javax.portlet.name=" + EmployeeControllerPortletKeys.EMPLOYEECONTROLLER,
		"javax.portlet.resource-bundle=content.Language",
		"javax.portlet.security-role-ref=power-user,user"
	},
	service = Portlet.class
)
@JsonIgnoreProperties({"expandoBridgeAttributes"})
public class EmployeeControllerPortlet extends MVCPortlet {
	
	@Override
	public void doView(RenderRequest renderRequest, RenderResponse renderResponse)
			throws IOException, PortletException {
		
		try {
			 // URL de la API que deseas consumir
            String apiUrl = "https://8e7c6b8a-fc46-4674-a529-4ebec57295d3.mock.pstmn.io/customers";

            // Crear la URL y abrir la conexión HTTP
            URL url = new URL(apiUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Configurar la solicitud
            connection.setRequestMethod("GET");

            // Obtener la respuesta
            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                // Leer la respuesta
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }

                in.close();

                // Procesar la respuesta como sea necesario
                String respuestaAPI = response.toString();
                String respuestaUTF8 = new String(respuestaAPI.getBytes("ISO-8859-1"), "UTF-8");
                
                // Reemplaza los caracteres especiales en las comillas dobles
                respuestaUTF8 = respuestaUTF8.replace("?", "\"");
                
                respuestaUTF8 = respuestaUTF8.replace("\"Calle 53 # 31A \" 56\"", "\"Calle 53 # 31A - 56\"");
                
                System.out.println("Respuesta de la API: " + respuestaUTF8);
            } else {
                System.out.println("Error al consumir la API. Código de respuesta: " + responseCode);
            }
            
           

            // Cerrar la conexión
            connection.disconnect();
        } catch (Exception e) {
            // Imprimir la ruta de excepciones
            e.printStackTrace();
        }
			
		System.out.println("EmployeeControllerPortlet.doView()  -- >");
		
		super.doView(renderRequest, renderResponse);
		
	}

}