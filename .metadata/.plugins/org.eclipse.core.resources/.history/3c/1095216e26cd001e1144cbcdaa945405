package com.lr.revisited.portlet;

import com.lr.revisited.constants.EmployeeControllerPortletKeys;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;

import javax.portlet.Portlet;
import javax.portlet.PortletException;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;

import org.osgi.service.component.annotations.Component;

import org.json.JSONArray;
import org.json.JSONObject;

/**
 * @author Sanks
 */
@Component(
	immediate = true,
	property = {
		"com.liferay.portlet.display-category=category.sample",
		"com.liferay.portlet.header-portlet-css=/css/main.css",
		"com.liferay.portlet.instanceable=true",
		"javax.portlet.display-name=EmployeeController",
		"javax.portlet.init-param.template-path=/",
		"javax.portlet.init-param.view-template=/view.jsp",
		"javax.portlet.name=" + EmployeeControllerPortletKeys.EMPLOYEECONTROLLER,
		"javax.portlet.resource-bundle=content.Language",
		"javax.portlet.security-role-ref=power-user,user"
	},
	service = Portlet.class
)
public class EmployeeControllerPortlet extends MVCPortlet {
	
	@Override
	public void doView(RenderRequest renderRequest, RenderResponse renderResponse)
			throws IOException, PortletException {
		
		try {
            // URL del endpoint que deseas consumir
            String endpointUrl = "https://8e7c6b8a-fc46-4674-a529-4ebec57295d3.mock.pstmn.io/customers";

            // Crear una conexión HTTP
            URL url = new URL(endpointUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Accept-Charset", "UTF-8");

            // Leer la respuesta
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));
            
            StringBuilder responseBuilder = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                responseBuilder.append(line);
            }

            // Procesar la respuesta como necesario
            String responseData = new String(responseBuilder.toString().getBytes("ISO-8859-1"), "UTF-8");
            String respuestOk = new String(responseBuilder.toString());
            // Eliminar los signos de interrogación no deseados
            responseData = responseData.replaceAll("\\?", "\"");
         // Eliminar los signos de interrogación no deseados y corregir el formato JSON
            respuestOk = respuestOk.replaceAll("â€œ", "\"");  // Reemplazar comillas de apertura
            respuestOk = respuestOk.replaceAll("â€�", "\"");  // Reemplazar comillas de cierre
            respuestOk = respuestOk.replaceAll("â€˜", "'");   // Reemplazar comillas simples
            respuestOk = respuestOk.replaceAll("â€™", "'");   // Reemplazar comillas simples de cierre
            respuestOk = respuestOk.replaceAll("â€“", "-");   // Reemplazar guiones largos

            // Puedes imprimir la respuesta o realizar acciones adicionales según tus necesidades
            System.out.println("Respuesta del Endpoint (formateada): " + responseData);
            
            // Puedes imprimir la respuesta o realizar acciones adicionales según tus necesidades
            System.out.println("Respuesta del Endpoint: " + responseData);
            System.out.println("Respuesta del Endpoint: " + respuestOk);
            JSONArray jsonArray = new JSONArray(respuestOk);
            
            // Cerrar la conexión y el lector
            reader.close();
            connection.disconnect();
        } catch (Exception e) {
            // Imprimir la ruta de excepciones
            e.printStackTrace();
        }
			
		System.out.println("EmployeeControllerPortlet.doView()  -- >");
		
		super.doView(renderRequest, renderResponse);
	}

}