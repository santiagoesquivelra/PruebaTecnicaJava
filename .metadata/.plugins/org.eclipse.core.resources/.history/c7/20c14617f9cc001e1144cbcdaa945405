package com.lr.revisited.portlet;

import com.liferay.portal.kernel.portlet.bridges.mvc.BaseMVCActionCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCActionCommand;
import com.liferay.portal.kernel.servlet.SessionErrors;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.revisated.service.EmployeeService;
import com.lr.revisited.constants.EmployeeControllerPortletKeys;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

@Component(immediate = true, property = 
      { "javax.portlet.name=" + EmployeeControllerPortletKeys.EMPLOYEECONTROLLER,
		"mvc.command.name=saveEmployee" },
 
		service = MVCActionCommand.class)
public class SaveActionMvcCommand extends BaseMVCActionCommand {
	
	
	@Override
	protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception {
		
		String name = ParamUtil.get(actionRequest, "name", "");
		String address = ParamUtil.get(actionRequest, "address", "");
		String phoneNo = ParamUtil.get(actionRequest, "phoneNo", "");
		int age = ParamUtil.get(actionRequest, "age", 0);

		
		System.out.println(name + " - " + address + " - " + phoneNo + " - " + age );
		
		System.out.println("SaveActionMvcCommand.doProcessAction()");
		
		// Validación de obligatoriedad de los campos
        if (Validator.isNull(name) || Validator.isNull(address) || Validator.isNull(phoneNo) || age <= 0) {
            SessionErrors.add(actionRequest, "required-fields");
            return;
        }

        // Validación del tipo de dato permitido
        if (!Validator.isDigit(String.valueOf(age))) {
            SessionErrors.add(actionRequest, "invalid-age");
            return;
        }

        // Validación del formato de address XXXX 99 # 99XXX – 99XXX
        if (!address.matches(".{4} \\d{2} # \\d{2}.{3} \\d{2}.{3}")) {
            SessionErrors.add(actionRequest, "invalid-address");
            return;
        }

        // Validación del formato de phoneNumber 9999999999
        if (!phoneNo.matches("\\d{10}")) {
            SessionErrors.add(actionRequest, "invalid-phoneNo");
            return;
        }

        // Validación del formato de age 99
        if (!String.valueOf(age).matches("\\d{1,2}")) {
            SessionErrors.add(actionRequest, "invalid-age");
            return;
        }

        // Validación del formato de name (camel case, longitud no mayor a 50 caracteres)
        if (!name.matches("^[A-Z][a-z]+( [A-Z][a-z]+){0,4}$") || name.length() > 50) {
            SessionErrors.add(actionRequest, "invalid-name");
            return;
        }

		
	}
	
}